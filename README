# Node Express API

Esta es CRUD en una Base de Datos utilizando Node.js construida con Express.js y MongoDB. Proporciona endpoints para acceder a diferentes vistas y tiene vistas con HTML y CSS para ejecutar los CRUD en 2 entidades.

## Instalación

1. Clona el repositorio:
    ```bash
    git clone <repository-url>
    ```
2. Navega al directorio del proyecto:
    ```bash
    cd <project-directory>
    ```
3. Instala las dependencias:
    ```bash
    npm install
    ```

## Ejecutando la API

Para iniciar el servidor, ejecuta el siguiente comando:
```bash
npm start
```

## Endpoints Disponibles para views

Puedes visitar las siguientes vistas a través de las URLs correspondientes:

- `/home`: Proporciona la vista principal de la aplicación mostrando todas las publiaciones que existan.
- `/users`: Muestra una lista de usuarios registrados.
- `/feed`: Muestra publicaciones pero solo la ultima publicacion por cada usuario.

## Endpoints Disponibles para la API

La API proporciona los siguientes endpoints:

- `/api/users`: Gestiona las operaciones relacionadas con los usuarios.
    - `POST /`: Crea un nuevo usuario. (`router.post('/', Controller.createUser)`)
    ejemplo: "{
        "name": "david",
        "lastName": "Pérez",
        "email": "assd@gmail.com",
        "userName": "davidp",
        "password": "1234",
        "repassword": "1234"
    }"
    - `PUT /:id`: Actualiza un usuario existente. (`router.put('/:id', Controller.updateUser)`)
    - `DELETE /:id`: Elimina un usuario existente. (`router.delete('/:id', Controller.deleteUser)`)
    - `GET /:id`: Obtiene un usuario específico. (`router.get('/:id', Controller.getUser)`)
- `/api/publi`: Gestiona las operaciones relacionadas con las publicaciones.
    - `GET /`: Obtiene la lista de publicaciones. (`router.get('/', Controller.getPublicaciones)`)
    - `POST /`: Crea una nueva publicacion. (`router.post('/', Controller.createPublicacion)`)
    - `POST /comment`: Crea un comntario a la publicacion. (`router.post('/', Controller.createComentarioPubli)`)
    ejemplo: '"title": "nueva publiacion",
    "description": "descrip de la nueva publicacion",
    "urlMedia": "https://images-na.ssl-images-amazon.com/images/I/51y6qg0K2OL._SX331_BO1,204,203,200_.jpg",
    "idUser":1"}' que al final se agrega por controllador el nuevo id que tendrá
    - `PUT /:id`: Actualiza una publicacion. (`router.put('/:id', Controller.updatePublicacion)`)
    - `DELETE /:id`: Elimina una publiacion. (`router.delete('/:id', Controller.deletePubli)`)
    - `GET /:id`: Obtiene una específico. (`router.get('/:id', Controller.getPublicacion)`)
- `/api/amistad`: Gestiona las operaciones relacionadas con las amitasdes entre usuarios.
    - `GET /`: Obtiene la lista de solitudes totales de amistad. (`router.get('/', Controller.getSolicitudesAmistad)`)
    - `POST /`: Crea un nueva nueva solicitud de amistad. (`router.post('/', Controller.createSolicitudAmistad)`) debe enviarse el id del user que envia y el id del user al cual se le hace la solicitud de amistad
    - `PUT /:id`: Actualiza la solicitud de amistad. (`router.put('/:id', Controller.updateSolicitudAmistad)`) tambien se usa para aceptar amistad o para negar amistad
    - `Delete /:id`: Elimina la solicitud de amistad. (`router.get('/:id', Controller.deleteSolicitudAmistad)`)



    ## Propósito Educativo

    Esta actividad ha sido creada para uso educativo de la Universidad Valle del Momboy. El objetivo es desarrollar una API utilizando Node.js, JavaScript y Express.js, MongoDB.



    ## Autor

    - **Nombre:** Yuliana Abreu
    - **Correo Electrónico:** abreucarrilloyv@uvm.edu.ve
